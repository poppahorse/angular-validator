angular.module("angularValidator",[]);function AngularValidator(opts,$compile,alertGuy){var scope;var scopeForm={};var form={};var validation={};var DOMForm={};var options=opts;var angularValidator={scope:scope,scopeForm:scopeForm,DOMForm:DOMForm,form:form,setForm:setForm,validation:validation,setValidation:setValidation,parseValidation:parseValidation,updateValidationMessage:updateValidationMessage};return angularValidator;function parseValidation(settings){var validationNoField=[];angular.forEach(angularValidator.form,function(formElement){if(formElement&&formElement.$name&&angularValidator.form[formElement.$name]){angularValidator.form[formElement.$name].$setValidity(formElement.$name,true);angularValidator.form[formElement.$name].$render()}});if(angularValidator.validation&&Object.keys(angularValidator.validation).length>0&&angularValidator.validation.details){angular.forEach(Object.keys(angularValidator.validation.details),function(key){var field=angularValidator.validation.details[key];var fieldName=field.field;if(angularValidator.form[fieldName]){angularValidator.form[fieldName].$setValidity(fieldName,false);if(field.description){angular.element(angularValidator.DOMForm[angularValidator.form.$name][fieldName]).attr("invalid-message","'"+field.description+"'")}}else{validationNoField.push(field)}})}if(validationNoField.length||angularValidator.validation.status=="ERROR"&&angularValidator.validation.details.length==0){var error_desc="";for(i=0;i<validationNoField.length;i++){error_desc+=validationNoField[i].description+".\n\n"}if(angularValidator.validation.description){error_desc+=angularValidator.validation.description+".\n\n"}if(settings&&!settings.disableValidationDialog){if(options.translateAlertDialog){alertGuy.localizedAlert({title:options.errorAlertTitle,text:error_desc})}else{alertGuy.alert({title:options.errorAlertTitle,text:error_desc})}}}}function setValidation(validation){angularValidator.validation=validation}function setForm(form){angularValidator.form=form}function updateValidationMessage(element,formInvalidMessage,formname){if(!(element.name in angularValidator.scopeForm[formname])){return}var scopeElementModel=angularValidator.scopeForm[formname][element.name];var validationMessageElement=isValidationMessagePresent(element);if(validationMessageElement){validationMessageElement.remove()}if((scopeElementModel.$dirty||angularValidator.scopeForm[formname].submitted)&&!("no-validation-message"in element.attributes)){if(scopeElementModel.$error.required){if("required-message"in element.attributes){angular.element(element).after($compile(generateErrorMessage(element.attributes["required-message"].value,scopeElementModel,angularValidator.scope))(angularValidator.scope))}else{angular.element(element).after($compile(generateErrorMessage(options.defaultRequiredMessage(),scopeElementModel,angularValidator.scope))(angularValidator.scope))}}else if(!scopeElementModel.$valid){if("invalid-message"in element.attributes){angular.element(element).after($compile(generateErrorMessage(element.attributes["invalid-message"].value,scopeElementModel,angularValidator.scope))(angularValidator.scope))}else if(formInvalidMessage){angular.element(element).after($compile(generateErrorMessage(formInvalidMessage.message(scopeElementModel,element,angularValidator.scope),scopeElementModel))(angularValidator.scope))}else{angular.element(element).after($compile(generateErrorMessage(options.defaultInvalidMessage(),scopeElementModel,angularValidator.scope))(angularValidator.scope))}}}}function generateErrorMessage(messageText,attrs,scope){var finalMsg=scope?scope.$eval(messageText):messageText;return'<validation class="control-label has-error validationMessage">'+'<a class="btn btn-tiny btn-validation-error" ng-click="showValid.'+attrs.$name+" = !showValid."+attrs.$name+'"></a>'+'<div class="sub-tooltip mod-validation-error ng-hide" ng-show="showValid.'+attrs.$name+'" ng-click="showValid.'+attrs.$name+" = !showValid."+attrs.$name+'">'+"<p>"+finalMsg+"</p>"+"</div>"+"</validation>"}function isValidationMessagePresent(element){var elementSiblings=angular.element(element).parent().children();for(var i=0;i<elementSiblings.length;i++){if(angular.element(elementSiblings[i]).hasClass("validationMessage")){return angular.element(elementSiblings[i])}}return false}}angular.module("angularValidator").provider("angularValidator",function(){var provider=this;provider.opts={errorAlertTitle:"There were errors in the data you sent",translateAlertDialog:false,defaultRequiredMessage:function(){return"'<i class=\"fa fa-times\"></i> Required'"},defaultInvalidMessage:function(){return"'<i class=\"fa fa-times\"></i> Invalid'"}};provider.$get=["$compile","alertGuy",function($compile,alertGuy){return new AngularValidator(provider.opts,$compile,alertGuy)}]}).directive("angularValidator",["$injector","$parse","$compile","angularValidator",function($injector,$parse,$compile,angularValidator){return{restrict:"A",link:function(scope,element,attrs,fn){var getRandomInt=function(){return Math.floor(Math.random()*1e5)};angularValidator.scope=scope;var need_to_recompile=false;angular.forEach(element.find("input,select,textarea"),function(child_element){child_element=$(child_element);if(!child_element.attr("name")){child_element.attr("name",getRandomInt());console.log("WARNING! AngularValidator -> One of your form elements(<input>, <textarea>, <select>) is missing a name. We got your back and added a name, but if you want a pretty one you should add it yourself.");need_to_recompile=true}});if(!attrs.name){element.attr("name","TGAV_FORM_"+getRandomInt());console.log("WARNING! AngularValidator -> Your form element(<form>) is missing a name. We got your back and added a name, but if you want a pretty one you should add it yourself.");need_to_recompile=true}if(need_to_recompile){$compile(element)(scope);return}angularValidator.DOMForm[attrs.name]=angular.element(element)[0];var watches=[];angularValidator.scopeForm[attrs.name]=$parse(attrs.name)(scope);angularValidator.scopeForm[attrs.name].submitted=false;scope.$watch(function(){return Object.keys(angularValidator.scopeForm[attrs.name]).length},function(){angular.forEach(watches,function(watch){watch()});setupWatches(angularValidator.DOMForm[attrs.name])});element.on("submit",function(event){event.preventDefault();scope.$apply(function(){angularValidator.scopeForm[attrs.name].submitted=true});angularValidator.setForm(angularValidator.scopeForm[attrs.name]);angularValidator.parseValidation();if(angularValidator.scopeForm[attrs.name].$valid||angularValidator.scopeForm[attrs.name].clientValid){angularValidator.scopeForm[attrs.name].clientValid=true;scope.$apply(function(){scope.$eval(attrs["angularValidatorSubmit"])})}});angularValidator.scopeForm[attrs.name].reset=function(){angular.forEach(angularValidator.DOMForm[attrs.name],function(formElement){if(formElement.name&&angularValidator.scopeForm[attrs.name][formElement.name]){angularValidator.scopeForm[attrs.name][formElement.name].$setViewValue("");angularValidator.scopeForm[attrs.name][formElement.name].$render()}});angularValidator.scopeForm[attrs.name].submitted=false;angularValidator.scopeForm[attrs.name].$setPristine()};setupWatches(angularValidator.DOMForm[attrs.name]);function hasFormInvalidMessage(formElement){if(formElement&&"invalid-message"in formElement.attributes){return $injector.get(formElement.attributes["invalid-message"].value)}else{return false}}function setupWatches(formElement){var formInvalidMessage=hasFormInvalidMessage(formElement);for(var i=0;i<formElement.length;i++){if(i in formElement){setupWatch(formElement[i],formInvalidMessage)}}}function setupWatch(elementToWatch,formInvalidMessage){if("validate-on"in elementToWatch.attributes&&elementToWatch.attributes["validate-on"].value==="blur"){angular.element(elementToWatch).on("blur",function(){angularValidator.updateValidationMessage(elementToWatch,formInvalidMessage,attrs.name);updateValidationClass(elementToWatch)})}var watch=scope.$watch(function(){return elementToWatch.value+elementToWatch.required+angularValidator.scopeForm[attrs.name].submitted+checkElementValidity(elementToWatch)+getDirtyValue(angularValidator.scopeForm[attrs.name][elementToWatch.name])+getValidValue(angularValidator.scopeForm[attrs.name][elementToWatch.name])},function(){if(angularValidator.scopeForm[attrs.name].submitted){angularValidator.updateValidationMessage(elementToWatch,formInvalidMessage,attrs.name);updateValidationClass(elementToWatch)}else{var isDirtyElement="validate-on"in elementToWatch.attributes&&elementToWatch.attributes["validate-on"].value==="dirty";if(isDirtyElement){angularValidator.updateValidationMessage(elementToWatch,formInvalidMessage,attrs.name);updateValidationClass(elementToWatch)}else if(angularValidator.scopeForm[attrs.name][elementToWatch.name]&&angularValidator.scopeForm[attrs.name][elementToWatch.name].$pristine){angularValidator.updateValidationMessage(elementToWatch,formInvalidMessage,attrs.name);updateValidationClass(elementToWatch)}}});watches.push(watch)}function getDirtyValue(element){if(element&&"$dirty"in element){return element.$dirty}}function getValidValue(element){if(element&&"$valid"in element){return element.$valid}}function checkElementValidity(element){if("validator"in element.attributes){var isElementValid=scope.$eval(element.attributes.validator.value);if(angularValidator.scopeForm[attrs.name][element.name]){angularValidator.scopeForm[attrs.name][element.name].$setValidity("angularValidator",isElementValid)}return isElementValid}}function updateValidationClass(element){if(!(element.name in angularValidator.scopeForm[attrs.name])){return}var formField=angularValidator.scopeForm[attrs.name][element.name];angular.element(element).removeClass("has-error");angular.element(element.parentNode).removeClass("has-error");$(element).parents(".form-element").removeClass("has-error");if(formField.$dirty||angularValidator.scopeForm[attrs.name].submitted){if(formField.$invalid){angular.element(element.parentNode).addClass("has-error");$(element).parents(".form-element").addClass("has-error");angular.element(element).addClass("has-error")}}}}}}]);
